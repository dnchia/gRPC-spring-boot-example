package com.dnchia.grpcclient;

import com.dnchia.grpcclient.dtos.CalculatorResponseDTO;
import com.dnchia.grpcclient.model.Operator;
import com.dnchia.grpcclient.services.GrpcClientService;
import lombok.extern.slf4j.Slf4j;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@Slf4j
@SpringBootApplication
public class GrpcClientApplication {
	/*
	 * The code of the client is generated by protobuf-maven-plugin on the build stage.
	 *
	 * Classes of grpc-api are used to stablish the connection, then, the grpc-client classes are used
	 * to execute the methods defined on the .proto example.
	 *
	 * For a real use case, CalculatorServiceGrpc, and the related classes, should be extracted, and a library
	 * created, in order to be used from any REST API, etc...
	 */
	public static void main(String[] args) {
		// Uncomment this line if do you want to execute the example from this class
		// Note that the tests will fail if this line is uncommented. The tests provide more use cases
		// This client needs the GRPC server to be up and running
		// runStaticExecution();
	}

	private static void runStaticExecution() {
		// Manually instantiated, but prepared and easily integrable using Spring injection
		// It is manually instantiated here to keep the client example simple
		GrpcClientService service = new GrpcClientService();
		service.setGrpcHost("localhost");
		service.setGrpcPort(9090);

		float firstOperand = 10f;
		float secondOperand = 2f;
		Operator operator = Operator.DIVIDE;

		CalculatorResponseDTO responseDTO = service.calculate(firstOperand, secondOperand, operator);
		log.info(responseDTO.toString());
	}
}
